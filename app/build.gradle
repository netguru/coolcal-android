apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.autoscout24.gradle.todo'

/**
 * Function to retrieve a secret from environment variable or gradle property
 * @param envVarName name of the environment variable to be used in the first place
 * @param propertyName name of the gradle.properties entry
 * @return value of the env. var, property or "undefined"
 */
def secret(String envVarName, String propertyName) {
    try {
        return '"' + (System.getenv(envVarName) ?: property(propertyName)) + '"'
    } catch (MissingPropertyException ignored) {
        return "\"$propertyName undefined\""
    }
}

def hockeyAppIdField = 'HOCKEY_APP_ID'

def stagingHockeyAppAppIdProp = secret("HOCKEYAPP_APP_ID_STAGING", "HockeyAppAppIdStaging")
def productionHockeyAppAppIdProp = secret("HOCKEYAPP_APP_ID_PRODUCTION", "HockeyAppAppIdProduction")
def openWeatherMapApiKeyProp = secret("OPENWEATHERMAP_API_KEY", "OpenWeatherMapApiKey")

project.ext {
    localBuildVersionCode = Integer.MAX_VALUE
    bitriseBuildNumber = System.getenv("BITRISE_BUILD_NUMBER")
    versionCode = bitriseBuildNumber ? Integer.parseInt(bitriseBuildNumber) : localBuildVersionCode
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {

        def Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(versionPropsFile))

        def major = versionProperties['MAJOR']
        def minor = versionProperties['MINOR']
        def patch = versionProperties['PATCH']

        defaultConfig {
            applicationId "co.netguru.android.coolcal"
            minSdkVersion 19
            targetSdkVersion 23
            versionCode = project.ext.versionCode
            versionName "${major}.${minor}.${patch}"
            vectorDrawables.useSupportLibrary = true
        }

        buildTypes.each { buildType ->
            buildType.buildConfigField 'String', 'OPENWEATHERMAP_API_KEY', openWeatherMapApiKeyProp
        }

        buildTypes {
            debug {
                versionNameSuffix "-debug-$versionCode"
                debuggable true
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            release {
                versionNameSuffix "-release-$versionCode"
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        productFlavors {
            staging {
                applicationId "co.netguru.android.coolcal.staging"
                buildConfigField 'String', hockeyAppIdField, stagingHockeyAppAppIdProp
            }

            production {
                applicationId "co.netguru.android.coolcal"
                buildConfigField 'String', hockeyAppIdField, productionHockeyAppAppIdProp
            }
        }

        sourceSets {
            debug.java.srcDirs += 'src/debug/kotlin'
            release.java.srcDirs += 'src/release/kotlin'
            main.java.srcDirs += 'src/main/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }

        todo {
            sourceFolder = "app/src/main/kotlin"
            fileExtensions = ["kt", "groovy"]
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

dependencies {
    // Kotlin standard library
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // HockeyApp
    compile 'net.hockeyapp.android:HockeySDK:4.1.5'

    // Android support libs
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"

    // Play Services Location
    compile 'com.google.android.gms:play-services-location:11.0.1'

    // Sliding up panel
    compile 'com.sothree.slidinguppanel:library:3.2.0'

    // Kotterknife / Butterknife
    compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'

    // JodaTime-android
    compile 'net.danlew:android.joda:2.9.9'

    // SectionCursorAdapter
    compile 'com.twotoasters.SectionCursorAdapter:library:2.0.1'

    // Rebound
    compile 'com.facebook.rebound:rebound:0.3.8'

    //Wava animations
    compile 'com.github.hujiaweibujidao:wava:1.0.0'

    // GSON
    compile 'com.google.code.gson:gson:2.7'

    // Retrofit
    compile "com.squareup.retrofit:retrofit:$retrofit_version"
    compile "com.squareup.retrofit:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit:adapter-rxjava:$retrofit_version"

    // ReactiveX
    compile 'io.reactivex:rxandroid:1.0.1'

    // Dagger2
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    compile "com.google.dagger:dagger:$dagger_version"

    // Picasso
    compile 'com.squareup.picasso:picasso:2.5.2'

    // test
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    // Leak canary
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"

    //Licenses dialog
    compile 'de.psdev.licensesdialog:licensesdialog:1.8.2'
}

buildscript {
    ext {
        support_version = '25.3.1'
        kotlin_version = '1.0.4' //fixme doesn't work with 1.1.0 and higher
        dagger_version = '2.11'
        retrofit_version = '2.0.0-beta2'
        leak_canary_version = '1.5.1'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}